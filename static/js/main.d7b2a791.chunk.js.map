{"version":3,"sources":["styles/InputContainer.js","Components/Phonebook/FindContact/FindContact.jsx","utils/validationInput.js","styles/AlertMessage.js","Components/Phonebook/AddContactForm/ContactForm.jsx","Components/Phonebook/AddContactForm/AddContactForm.jsx","styles/deleteBtn.js","Components/Phonebook/ContactItems/ContactItems.jsx","utils/hideAlertMessages.js","utils/isUniqName.js","utils/getMessageForEmptyContactList.js","styles/ContainerPhonebook.js","styles/ContactList.js","Components/Phonebook/Phonebook.jsx","App.jsx","index.js"],"names":["InputContainer","FindContact","children","addFindFilterValue","type","onChange","DisplayingErrorMessagesSchema","Yup","shape","name","min","max","required","tel","phone","AlertMessage","ContactForm","errors","touched","htmlFor","id","placeholder","style","left","stylesIcons","width","height","AddContactForm","state","toggleButton","toggleForm","setState","prevState","onSubmitForm","event","actions","uuidv4","props","submit","resetForm","onClick","this","initialValues","onSubmit","validationSchema","Component","Button","stylesIcon","ContactItems","contacts","onDeleteClick","noContactsMessage","length","map","el","defaultProps","hideAlertMessages","context","setTimeOutId","setTimeout","toggleMessage","clearTimeout","isUniqueName","names","isUniq","forEach","getMessageForEmptyContactList","filtredContactList","ContainerPhonebook","ContactList","Phonebook","filter","toggleSort","getContact","contact","onDeleteBtnClick","dataId","currentTarget","dataset","remainderContacts","onSortBtnClick","sortContacts","sortArray","reverse","normalizeValue","target","value","toLowerCase","getFilterdContactList","includes","JSON","parse","localStorage","getItem","prevProps","setItem","stringify","messageForEmptyContactList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7b2a791.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\n\nexport const InputContainer = styled.div`\n  margin-bottom: 30px;\n`;\n","import PropTypes from 'prop-types';\r\n//Styles\r\nimport { InputContainer } from 'styles/InputContainer';\r\n\r\nconst FindContact = ({ children, addFindFilterValue }) => {\r\n  return (\r\n    <InputContainer>\r\n      <h3>Find contact by name</h3>\r\n      <input type=\"text\" onChange={addFindFilterValue} />\r\n      {children}\r\n    </InputContainer>\r\n  );\r\n};\r\n\r\nFindContact.propTypes = {\r\n  addFindFilterValue: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FindContact;\r\n","import * as Yup from 'yup';\nimport 'yup-phone';\n\nconst errorMessageInvalidPhone = 'Вы ввели не корректный номер телефона';\nconst errorMessageRequiredName = 'Введите имя';\nconst erroeMessageTooLong = 'Имя слишком длинное';\nconst erroeMessageTooShort = 'Имя слишком короткое';\n\nconst DisplayingErrorMessagesSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, erroeMessageTooShort)\n    .max(20, erroeMessageTooLong)\n    .required(errorMessageRequiredName),\n  tel: Yup.string().phone('', false, errorMessageInvalidPhone).required(),\n});\n\nexport default DisplayingErrorMessagesSchema;\n","import styled from '@emotion/styled/macro';\n\nexport const AlertMessage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px 10px;\n  background-color: tomato;\n  position: absolute;\n  top: 30px;\n  left: 0;\n  color: #fff;\n  border-radius: 2px;\n  box-shadow: 0px 0px 5px 3px #ff0000;\n`;\n","import { Form, Field } from 'formik';\r\n//Utils\r\nimport { AlertMessage } from 'styles/AlertMessage';\r\n\r\nconst ContactForm = ({ errors, touched, children }) => {\r\n  return (\r\n    <Form>\r\n      <label htmlFor=\"name\">Name</label>\r\n      <Field id=\"name\" name=\"name\" placeholder=\"Enter name\" />\r\n\r\n      {touched.name && errors.name && (\r\n        <AlertMessage>{errors.name}</AlertMessage>\r\n      )}\r\n      <label htmlFor=\"tel\">Phone</label>\r\n      <Field id=\"tel\" name=\"tel\" placeholder=\"Enter phone number\" />\r\n\r\n      {touched.tel && errors.tel && (\r\n        <AlertMessage style={{ left: '238px' }}>{errors.tel}</AlertMessage>\r\n      )}\r\n      <button type=\"submit\">add</button>\r\n      {children}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Utils\r\nimport DisplayingErrorMessagesSchema from 'utils/validationInput';\r\nimport { Formik } from 'formik';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//Components\r\nimport { AiFillPlusCircle, AiOutlineClose } from 'react-icons/ai';\r\nimport ContactForm from 'Components/Phonebook/AddContactForm/ContactForm';\r\n\r\nconst stylesIcons = {\r\n  width: '30px',\r\n  height: '30px',\r\n};\r\n\r\nclass AddContactForm extends Component {\r\n  static propTypes = {\r\n    submit: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    toggleButton: false,\r\n  };\r\n\r\n  toggleForm = () => {\r\n    this.setState(prevState => ({ toggleButton: !prevState.toggleButton }));\r\n  };\r\n\r\n  onSubmitForm = (event, actions) => {\r\n    const id = uuidv4();\r\n    this.props.submit({ ...event, id });\r\n    actions.resetForm();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <button type=\"button\" onClick={this.toggleForm}>\r\n          {this.state.toggleButton ? (\r\n            <AiOutlineClose style={stylesIcons} />\r\n          ) : (\r\n            <AiFillPlusCircle style={stylesIcons} />\r\n          )}\r\n        </button>\r\n        {this.state.toggleButton && (\r\n          <Formik\r\n            initialValues={{\r\n              name: '',\r\n              tel: '',\r\n            }}\r\n            onSubmit={this.onSubmitForm}\r\n            validationSchema={DisplayingErrorMessagesSchema}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <ContactForm errors={errors} touched={touched}>\r\n                {this.state.toggleButton && this.props.children}\r\n              </ContactForm>\r\n            )}\r\n          </Formik>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default AddContactForm;\r\n","import styled from '@emotion/styled/macro';\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  padding: 8px;\n`;\n","import PropTypes from 'prop-types';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\nimport { Button } from 'styles/deleteBtn';\r\n\r\nconst stylesIcon = {\r\n  width: '20px',\r\n  height: '20px',\r\n};\r\n\r\nconst ContactItems = ({ contacts, onDeleteClick, noContactsMessage }) => {\r\n  return (\r\n    <>\r\n      {contacts.length\r\n        ? contacts.map(el => {\r\n            return (\r\n              <li key={el.id}>\r\n                {el.name} : {el.tel}\r\n                <Button\r\n                  type=\"button\"\r\n                  data-id={el.id}\r\n                  onClick={onDeleteClick}\r\n                  aria-label=\"delete contact\"\r\n                >\r\n                  <AiFillDelete style={stylesIcon} />\r\n                </Button>\r\n              </li>\r\n            );\r\n          })\r\n        : noContactsMessage}\r\n    </>\r\n  );\r\n};\r\n\r\nContactItems.defaultProps = {\r\n  noContactsMessage: 'телефонная книга пуста!',\r\n};\r\n\r\nContactItems.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      tel: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n  noContactsMessage: PropTypes.string,\r\n};\r\n\r\nexport default ContactItems;\r\n","const hideAlertMessages = context => {\n  const setTimeOutId = setTimeout(() => {\n    if (context.state.toggleMessage) {\n      context.setState({ toggleMessage: false });\n    }\n    clearTimeout(setTimeOutId);\n  }, 2000);\n};\n\nexport default hideAlertMessages;\n","const isUniqueName = (name, names) => {\n  let isUniq = true;\n  names.forEach(el => {\n    if (el.name === name) {\n      isUniq = !isUniq;\n    }\n  });\n  return isUniq;\n};\nexport default isUniqueName;\n","const getMessageForEmptyContactList = (contacts, filtredContactList) => {\n  const messageOption = contacts?.length > filtredContactList?.length;\n  return messageOption\n    ? 'В списке контактов нет такого имени'\n    : 'Вы не добавили ни одного контакта';\n};\nexport default getMessageForEmptyContactList;\n","import styled from '@emotion/styled/macro';\n\nexport const ContainerPhonebook = styled.div`\n  box-sizing: border-box;\n  padding: 20px 30px;\n  width: 1200px;\n  background: rgb(34, 193, 195);\n  background: linear-gradient(\n    0deg,\n    rgba(34, 193, 195, 1) 0%,\n    rgba(123, 90, 149, 1) 100%\n  );\n  form {\n    display: inline-block;\n    margin-right: 40px;\n    position: relative;\n    margin-bottom: 30px;\n  }\n  & > button {\n    margin-bottom: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    padding: 0px;\n    border: none;\n    outline: none;\n  }\n  margin: 0 auto;\n  h1 {\n    margin-bottom: 30px;\n  }\n  h2 {\n    margin-bottom: 20px;\n  }\n  h3 {\n    margin-bottom: 20px;\n  }\n  input {\n    margin-right: 10px;\n  }\n  label {\n    margin-right: 10px;\n  }\n`;\n","import styled from '@emotion/styled/macro';\n\nexport const ContactList = styled.ul`\n  width: 400px;\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 8px;\n  }\n`;\n","import { Component } from 'react';\r\n//Components\r\nimport FindContact from 'Components/Phonebook/FindContact/FindContact';\r\nimport AddContactForm from 'Components/Phonebook/AddContactForm/AddContactForm';\r\nimport ContactItems from 'Components/Phonebook/ContactItems/ContactItems';\r\n//Utils\r\nimport hideAlertMessages from 'utils/hideAlertMessages';\r\nimport sortArray from 'array-sort';\r\nimport isUniqueName from 'utils/isUniqName';\r\nimport getMessageForEmptyContactList from 'utils/getMessageForEmptyContactList';\r\n//Styles\r\nimport { ContainerPhonebook } from 'styles/ContainerPhonebook';\r\nimport { ContactList } from 'styles/ContactList';\r\nimport { AlertMessage } from 'styles/AlertMessage';\r\n\r\nexport default class Phonebook extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n    toggleSort: false,\r\n    toggleMessage: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contacts = JSON.parse(localStorage.getItem('state'));\r\n    if (contacts) {\r\n      this.setState({ contacts: [...contacts] });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contacts } = this.state;\r\n    if (prevState.contacts.length !== contacts.length) {\r\n      localStorage.setItem('state', JSON.stringify(contacts));\r\n    }\r\n    hideAlertMessages(this);\r\n  }\r\n\r\n  getContact = contact => {\r\n    this.setState(({ contacts, toggleMessage }) => {\r\n      const isUniqName = isUniqueName(contact.name, contacts);\r\n      if (isUniqName) return { contacts: [...contacts, contact] };\r\n      return { toggleMessage: !toggleMessage };\r\n    });\r\n  };\r\n\r\n  onDeleteBtnClick = event => {\r\n    const dataId = event.currentTarget.dataset.id;\r\n    this.setState(prevState => {\r\n      const remainderContacts = prevState.contacts.filter(\r\n        contact => contact.id !== dataId,\r\n      );\r\n      return { contacts: [...remainderContacts] };\r\n    });\r\n  };\r\n\r\n  onSortBtnClick = () => {\r\n    this.setState(prevState => {\r\n      const sortContacts = sortArray(prevState.contacts, 'name', {\r\n        reverse: prevState.toggleSort,\r\n      });\r\n      return {\r\n        contacts: [...sortContacts],\r\n        toggleSort: !prevState.toggleSort,\r\n      };\r\n    });\r\n  };\r\n\r\n  addFindFilterValue = event => {\r\n    const normalizeValue = event.target.value.toLowerCase();\r\n    this.setState({ filter: normalizeValue });\r\n  };\r\n\r\n  getFilterdContactList = () => {\r\n    const { filter, contacts } = this.state;\r\n    if (filter) {\r\n      const filtredContacts = contacts.filter(el =>\r\n        el.name.toLowerCase().includes(filter),\r\n      );\r\n      return filtredContacts;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { toggleMessage, contacts } = this.state;\r\n    const filtredContactList = this.getFilterdContactList();\r\n    const messageForEmptyContactList = getMessageForEmptyContactList(\r\n      contacts,\r\n      filtredContactList,\r\n    );\r\n    return (\r\n      <ContainerPhonebook>\r\n        <h1>Phonebook</h1>\r\n        <AddContactForm submit={this.getContact}>\r\n          {toggleMessage && (\r\n            <AlertMessage>Такое имя уже есть в списке контактов</AlertMessage>\r\n          )}\r\n        </AddContactForm>\r\n        <h2>contacts</h2>\r\n        <FindContact addFindFilterValue={this.addFindFilterValue}>\r\n          <button type=\"button\" onClick={this.onSortBtnClick}>\r\n            sort contact\r\n          </button>\r\n        </FindContact>\r\n        <ContactList>\r\n          <ContactItems\r\n            contacts={filtredContactList || contacts}\r\n            onDeleteClick={this.onDeleteBtnClick}\r\n            noContactsMessage={messageForEmptyContactList}\r\n          />\r\n        </ContactList>\r\n      </ContainerPhonebook>\r\n    );\r\n  }\r\n}\r\n","// Componensts\r\nimport Phonebook from 'Components/Phonebook/Phonebook';\r\n\r\nconst App = () => {\r\n  return <Phonebook />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}